import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Библиотека pandas
# Основные функции и возможности:
# Чтение и запись данных из различных источников (CSV, Excel, SQL).
# Манипуляция данными: фильтрация, сортировка, группировка, агрегирование.
# Работа с пропущенными значениями.
# Преобразование типов данных.
# Создание новых столбцов на основе существующих.

# Читаем данные из CSV-файла
df = pd.read_csv('example_data.csv')

# Выводим все строк
print(df.head(10))

# Фильтруем строки по условию
filtered_df = df.query("возраст > 30")

# Считаем среднее значение возраста
mean_age = filtered_df['возраст'].mean()

# Выводим результат
print(f"Средний возраст людей старше 30 лет: {mean_age}")

# Считаем сумму зарплаты всех
print(f"Фонд зарплаты:", df['зарплата'].sum())

# Считаем средний возраст и среднюю зарплату всех
print(f"Средний возраст и средняя зарплата всех:\n", df[['возраст', 'зарплата']].mean())

# Библиотека NumPy:
# Основные функции и возможности:
# Создание и работа с многомерными массивами.
# Быстрое выполнение математических операций над массивами.
# Генерация случайных чисел.
# Линейная алгебра.
# Манипуляции с матрицами.

# Создадим двумерный массив размером 5x5, заполненный случайными числами
arr_2d = np.random.randn(5, 5)
print("\nДвумерный массив:\n", arr_2d)

# Найдем максимальное значение в каждом ряду
max_in_rows = np.amax(arr_2d, axis=1)
print("\nМаксимальные значения в рядах:", max_in_rows)

# Найдем минимальное значение в каждом столбце
min_in_cols = np.amin(arr_2d, axis=0)
print("\nМинимальные значения в столбцах:", min_in_cols)

# Вычислим среднее значение всего массива
mean_value = np.mean(arr_2d)
print("\nСреднее значение массива:", mean_value)

# Создадим одномерный массив из первых трех строк второго столбца
sub_arr = arr_2d[:3, 1]
print("\nПодмассив из первых трех строк второго столбца:", sub_arr)

# Переставим строки и столбцы местами (транспонирование)
transposed_arr = arr_2d.T
print("\nТранспонированный массив:\n", transposed_arr)

# Вычислим произведение всех элементов массива
product_of_elements = np.prod(arr_2d)
print("\nПроизведение всех элементов массива:", product_of_elements)

# Библиотека Matplotlib
# Основные функции и возможности:
# Построение графиков и диаграмм.
# Настройка осей, меток, заголовков.
# Добавление легенды и аннотаций.
# Сохранение графика в файл.

# Начальная позиция времени t
t = 0

# Функция для создания анимации
def update(frame):
    global t
    t += 0.05

    # Очистка оси перед добавлением новых данных
    ax.clear()

    # Создание новых данных для текущего момента времени
    x = np.linspace(0, 10, 100)
    y = np.sin(x + t)

    # Отображение новых данных
    ax.plot(x, y, color='blue', linewidth=2)

    # Установка пределов осей
    ax.set_xlim(0, 10)
    ax.set_ylim(-1.1, 1.1)

    # Возврат линии для анимации
    return ax,


# Создание фигуры и осей
fig, ax = plt.subplots()

# Создание анимации
ani = FuncAnimation(fig, update, frames=np.arange(0, 2 * np.pi, 0.05), interval=50, blit=False)

# Отображение анимации
plt.show()











